%description:

In this test, packets are produced periodically by an active packet source
(ActivePacketSource). The packets are consumed by two passive packet sinks
(PassivePacketSinks). The single source is connected to the two sinks using a
classifier (PacketClassifier). The classifier forwards packets alternately to
one or the other sink.

%file: test.ned

import inet.queueing.sink.PassivePacketSink;
import inet.queueing.classifier.PacketClassifier;
import inet.queueing.source.ActivePacketSource;

network TestClassifier
{
    submodules:
        producer: ActivePacketSource {
            @display("p=100,100");
        }
        classifier: PacketClassifier {
            @display("p=200,100");
        }
        consumer1: PassivePacketSink {
            @display("p=300,100");
        }
        consumer2: PassivePacketSink {
            @display("p=300,200");
        }
    connections allowunconnected:
        producer.out --> classifier.in;
        classifier.out++ --> consumer1.in;
        classifier.out++ --> consumer2.in;
}

%file: Test.cc
#include "inet/queueing/function/PacketClassifierFunction.h"
#include "inet/common/packet/Packet.h"

using namespace inet; 

static int testClassify(Packet *packet)
{
    return packet->getId() % 2;
}

Register_Packet_Classifier_Function(TestClassifier, testClassify);

%inifile: omnetpp.ini

[General]
network = TestClassifier
sim-time-limit = 10s
cmdenv-event-banners = false
cmdenv-log-prefix = "At %ts %N: "
*.producer.packetLength = 1B
*.producer.productionInterval = 1s
*.classifier.classifierClass = "TestClassifier"

%# remove formatting
%subst: /\x1B\[[0-9;]*m//

%subst: /\nRunning simulation\.\.\.\n//

%contains-regex: stdout
At 0s producer: Producing packet, .*?producer-0.*?
At 0s classifier: Classifying packet, .*?producer-0.*?
At 0s consumer2: Consuming packet, .*?producer-0.*?
At 1s producer: Producing packet, .*?producer-1.*?
At 1s classifier: Classifying packet, .*?producer-1.*?
At 1s consumer1: Consuming packet, .*?producer-1.*?
At 2s producer: Producing packet, .*?producer-2.*?
At 2s classifier: Classifying packet, .*?producer-2.*?
At 2s consumer2: Consuming packet, .*?producer-2.*?
At 3s producer: Producing packet, .*?producer-3.*?
At 3s classifier: Classifying packet, .*?producer-3.*?
At 3s consumer1: Consuming packet, .*?producer-3.*?
At 4s producer: Producing packet, .*?producer-4.*?
At 4s classifier: Classifying packet, .*?producer-4.*?
At 4s consumer2: Consuming packet, .*?producer-4.*?
At 5s producer: Producing packet, .*?producer-5.*?
At 5s classifier: Classifying packet, .*?producer-5.*?
At 5s consumer1: Consuming packet, .*?producer-5.*?
At 6s producer: Producing packet, .*?producer-6.*?
At 6s classifier: Classifying packet, .*?producer-6.*?
At 6s consumer2: Consuming packet, .*?producer-6.*?
At 7s producer: Producing packet, .*?producer-7.*?
At 7s classifier: Classifying packet, .*?producer-7.*?
At 7s consumer1: Consuming packet, .*?producer-7.*?
At 8s producer: Producing packet, .*?producer-8.*?
At 8s classifier: Classifying packet, .*?producer-8.*?
At 8s consumer2: Consuming packet, .*?producer-8.*?
At 9s producer: Producing packet, .*?producer-9.*?
At 9s classifier: Classifying packet, .*?producer-9.*?
At 9s consumer1: Consuming packet, .*?producer-9.*?
At 10s producer: Producing packet, .*?producer-10.*?
At 10s classifier: Classifying packet, .*?producer-10.*?
At 10s consumer2: Consuming packet, .*?producer-10.*?

<!> Simulation time limit reached -- at t=10s
