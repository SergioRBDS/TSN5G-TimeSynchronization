%description:

In this test, packets are collected periodically by an active packet sink
(ActivePacketSink). The packets are produced by two passive packet sources
(PassivePacketSources). The single sink is connected to the two sources using a
scheduler (PacketScheduler). The scheduler forwards packets alternately from
one or the other source.

%file: test.ned

import inet.queueing.sink.ActivePacketSink;
import inet.queueing.scheduler.PacketScheduler;
import inet.queueing.source.PassivePacketSource;

network TestScheduler
{
    submodules:
        provider1: PassivePacketSource {
            @display("p=100,100");
        }
        provider2: PassivePacketSource {
            @display("p=100,200");
        }
        scheduler: PacketScheduler {
            @display("p=200,100");
        }
        collector: ActivePacketSink {
            @display("p=300,100");
        }
    connections allowunconnected:
        provider1.out --> scheduler.in++;
        provider2.out --> scheduler.in++;
        scheduler.out --> collector.in;
}

%file: Test.cc
#include <vector>
#include "inet/queueing/function/PacketSchedulerFunction.h"
#include "inet/common/packet/Packet.h"
#include "inet/queueing/contract/IPassivePacketSource.h"

using namespace inet; 

static int testSchedule(const std::vector<queueing::IPassivePacketSource *>& providers)
{
    static int i = 0;
    return i++ % 2;
}

Register_Packet_Scheduler_Function(TestScheduler, testSchedule);

%inifile: omnetpp.ini

[General]
network = TestScheduler
sim-time-limit = 10s
cmdenv-event-banners = false
cmdenv-log-prefix = "At %ts %N: "
*.provider*.packetLength = 1B
*.collector.collectionInterval = 1s
*.scheduler.schedulerClass = "TestScheduler"

%# remove formatting
%subst: /\x1B\[[0-9;]*m//

%subst: /\nRunning simulation\.\.\.\n//

%contains-regex: stdout
At 0s provider1: Providing packet, .*?provider1-0.*?
At 0s scheduler: Scheduling packet, .*?provider1-0.*?
At 0s collector: Collecting packet, .*?provider1-0.*?
At 1s provider2: Providing packet, .*?provider2-0.*?
At 1s scheduler: Scheduling packet, .*?provider2-0.*?
At 1s collector: Collecting packet, .*?provider2-0.*?
At 2s provider1: Providing packet, .*?provider1-1.*?
At 2s scheduler: Scheduling packet, .*?provider1-1.*?
At 2s collector: Collecting packet, .*?provider1-1.*?
At 3s provider2: Providing packet, .*?provider2-1.*?
At 3s scheduler: Scheduling packet, .*?provider2-1.*?
At 3s collector: Collecting packet, .*?provider2-1.*?
At 4s provider1: Providing packet, .*?provider1-2.*?
At 4s scheduler: Scheduling packet, .*?provider1-2.*?
At 4s collector: Collecting packet, .*?provider1-2.*?
At 5s provider2: Providing packet, .*?provider2-2.*?
At 5s scheduler: Scheduling packet, .*?provider2-2.*?
At 5s collector: Collecting packet, .*?provider2-2.*?
At 6s provider1: Providing packet, .*?provider1-3.*?
At 6s scheduler: Scheduling packet, .*?provider1-3.*?
At 6s collector: Collecting packet, .*?provider1-3.*?
At 7s provider2: Providing packet, .*?provider2-3.*?
At 7s scheduler: Scheduling packet, .*?provider2-3.*?
At 7s collector: Collecting packet, .*?provider2-3.*?
At 8s provider1: Providing packet, .*?provider1-4.*?
At 8s scheduler: Scheduling packet, .*?provider1-4.*?
At 8s collector: Collecting packet, .*?provider1-4.*?
At 9s provider2: Providing packet, .*?provider2-4.*?
At 9s scheduler: Scheduling packet, .*?provider2-4.*?
At 9s collector: Collecting packet, .*?provider2-4.*?
At 10s provider1: Providing packet, .*?provider1-5.*?
At 10s scheduler: Scheduling packet, .*?provider1-5.*?
At 10s collector: Collecting packet, .*?provider1-5.*?

<!> Simulation time limit reached -- at t=10s
